// This is the part of the zote standard library written directly
// in zote. It is included in every build of zote (vm version).

/// Maps the function f over a collection of values
fn map(coll, f) -> {
	new := [];
	for item in coll {
		item >> f >> push(new);
	}
	new
}

/// Reverses a collection
fn rev(coll) -> {
	coll[::-1]
}

/// Enumerates a collection, starting at 0
fn enumerate(coll) -> {
	res := [];
	ind := 0;
	for item in coll {
		[ind, item] >> push(res);
		ind += 1;
	}
	res
}

/// Adds up all values in a collection
fn sum(coll) -> {
	sum := 0;
	for item in coll {
		sum += item;
	}
	sum
}

// Multiplies all the values in a collection 
fn prod(coll)-> {
	prod := coll[0];
	i := 0;
	len := len(coll);
	while (i += 1) < len {
		prod *= coll[i];
	}
	prod
}

/// Get all the keys from a dictionary
fn keys(dict) -> {
	keys := [];
	for (key, value) in dict {
		key >> push(keys);
	}
	keys
}

/// Just casts a value to a bool 
fn bool(value) -> if value true else false;

/// Concatenate a list of values to a single string
fn join(coll, sep) -> {
	// Probably quite slow
	res := "";
	for value in coll {
		res = res ++ value ++ sep;
	}
	// Don't include last separator
	if len(sep) == 0 {
		res
	} else {
		res[:-len(sep)]
	}
}

/// Converts an iterable to a list, only keeping items that clear the predicate
fn filter(collection, pred) -> {
	list := collection[0:0];
	for item in collection {
		if pred(item) push(item, list);
	} 
	list
}

/// Gets the maximum of an iterable
fn maximum(iterable) -> {
	max := nil;
	for value in iterable {
		if max == nil or value > max {
			max = value;
		}
	}
	max
}

/// Gets the min of an iterable
fn minimum(iterable) -> {
	min := nil;
	for value in iterable {
		if min == nil or value < min {
			min = value;
		}
	}
	min
}

/// Gets the max of two values
fn max(x, y) -> {
	if x > y {
		x
	} else {
		y
	}
}

/// Gets the min of two values
fn min(x, y) -> {
	if x < y {
		x
	} else {
		y
	}
}

/// Inserts an item into a set
fn insert(item, set) -> {
	set[item] = nil;
	item
}

/// Absolute value of a numeric
fn abs(nbr) -> {
	if nbr >= 0
		nbr
	else
		-nbr
}

/// The constant function always returns the second argument
fn const(x, y) -> y;

/// returns true if all values fulfill the predicate
fn all(coll, pred) -> {
	for value in coll if !pred(value) return false;
	true
}

/// returns true if all values fulfill the predicate
fn any(coll, pred) -> {
	for value in coll if pred(value) return true;
	false
}

// Wrappers around standard operators
neg := \x -> -x;
add := \x, y -> x + y;
sub := \x, y -> x - y;
mul := \x, y -> x * y;
div := \x, y -> x / y;

not := \x -> !x;
eq :=  \x, y -> x == y;
neq := \x, y -> x != y;
gt :=  \x, y -> x > y;
geq := \x, y -> x >= y;
lt :=  \x, y -> x < y;
leq := \x, y -> x <= y;

