// This is the part of the zote standard library written directly
// in zote. It is included in every build of zote (vm version).

/// Maps the function f over a collection of values
fn map(coll, f) -> {
	new := [];
	for item in coll {
		item >> f >> push(new);
	}
	new
}

/// Reverses a collection
fn rev(coll) -> {
	coll[::-1]
}

/// Enumerates a collection, starting at 0
fn enumerate(coll) -> {
	res := [];
	ind := 0;
	for item in coll {
		[ind, item] >> push(res);
		ind += 1;
	}
	res
}

// We want to handle lists and strings differently eg when delimiter is several characters long
// /// Splits a collection at a delimiter
// ///
// /// It never pushes empty items
// fn split(coll, delimiter) -> {
// 	split_start := 0;
// 	splits := [];
// 	for (ind, entry) in coll >> enumerate {
// 		if entry == delimiter {
// 			if split_start != ind {
// 				coll[split_start:ind] >> push(splits);
// 			}
// 			split_start = ind + 1;
// 		}
// 	}

// 	if split_start != len(coll) {
// 		coll[split_start:] >> push(splits);
// 	}

// 	splits
// }

/// Slices the first values from a coll
fn take(coll, k) -> {
	// TODO: DO this in parsing instead
	coll[:k]
}

/// Adds up all values in a collection
fn sum(coll) -> {
	sum := 0;
	for item in coll {
		sum += item;
	}
	sum
}

/// Takes the first item from an iterator
fn head(coll) -> {
	coll[0]
}

/// Get all the keys from a dictionary
fn keys(dict) -> {
	keys := [];
	for (key, value) in dict {
		key >> push(keys);
	}
	keys
}

/// Just casts a value to a bool 
fn bool(value) -> if value true else false;

/// Concatenate a list of values to a single string
fn join(coll, sep) -> {
	// Probably quite slow
	res := "";
	for value in coll {
		res = res ++ value ++ sep;
	}
	// Don't include last separator
	if len(sep) == 0 {
		res
	} else {
		res[:-len(sep)]
	}
}

/// Converts an iterable to a list, only keeping items that clear the predicate
fn filter(collection, pred) -> {
	list := [];
	for item in collection {
		if pred(item) push(item, list);
	} 
	list
}

/// Gets the maximum of an iterable
fn maximum(iterable) -> {
	max := nil;
	for value in iterable {
		if max == nil or value > max {
			max = value;
		}
	}
	max
}

/// Gets the min of an iterable
fn minimum(iterable) -> {
	min := nil;
	for value in iterable {
		if min == nil or value < min {
			min = value;
		}
	}
	min
}

// Gets the max of two values
fn max(x, y) -> {
	if x > y {
		x
	} else {
		y
	}
}

// Gets the min of two values
fn min(x, y) -> {
	if x < y {
		x
	} else {
		y
	}
}
