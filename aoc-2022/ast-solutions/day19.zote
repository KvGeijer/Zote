read("aoc-2022/inputs/19.txt") >> split("\n")
	>> map(\>> split(" "))
	>> map(\words ->
		[
			[words[6], 0, 0],
			[words[12], 0, 0],
			[words[18], words[21], 0],
			[words[27], 0, words[30]],
		] >> map(\>> map(int)))
	:>> blueprints;

fn can_produce(costs, robots) -> {
	for (cost, prod) in zip(costs, robots) if cost > 0 and prod == 0 return false;
	true
}

fn turns_to_prod(costs, robots, inv) -> 
	zip(costs, inv) 
		>> map(\(c, i) -> if c > i { c - i } else 0)
		>> zip(robots) 
		>> map(\(n, prod) -> if n > 0 (n + prod - 1) / prod else 0)
		>> max;

blueprint_results := [];
part2_res := [];
for (bi, blueprint) in blueprints >> enumerate {
	// No need building more robots than this
	max_robots := [0:3] >> map(\i -> blueprint >> map(\costs -> costs[i]) >> max);
	cache := dict();

	fn dfs(robots, inv, time) -> {
		key := [robots, inv, time];
		if key >> in(cache) return cache[key];

		best := 0;
		// build one of the 4 robots
		if can_produce(blueprint[3], robots) and turns_to_prod(blueprint[3], robots, inv) == 0 and time > 1 {
			rem_time := time - 1;
			new_inv := enumerate(inv)
				>> map(\(i, val) -> val - blueprint[3][i] + robots[i]);
				
			best = max(best, rem_time + dfs(robots, new_inv, rem_time));

		} else for (i, cost) in enumerate(blueprint) if can_produce(cost, robots) and (i == 3 or robots[i] < max_robots[i]) {
			turns := turns_to_prod(cost, robots, inv);
			rem_time := time - turns - 1;
			if rem_time > 0 {
				new_inv := enumerate(inv)
					>> map(\(i, val) -> val - cost[i] + (turns + 1)*robots[i]);
				if i == 3 {
					best = max(best, rem_time + dfs(robots, new_inv, rem_time));
				} else {
					new_robots := robots >> map(id);
					new_robots[i] += 1;
					
					res := dfs(new_robots, new_inv, rem_time);
					best = max(best, res);
				}
			}
		}
		cache[key] = best
	}

	dfs([1, 0, 0], [0, 0, 0], 24)*(bi+1) >> push(blueprint_results);
	if bi < 3 dfs([1, 0, 0], [0, 0, 0], 32) >> push(part2_res); 
	
}

// TODO: Add to stdlib, or fold or something
fn prod(xs) -> {
	res := 1;
	for x in xs res *= x;
	res
}

blueprint_results >> sum >> print;
part2_res >> prod >> print;
