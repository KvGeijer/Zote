fn cmp(x, y) -> {
	match [typeof(x), typeof(y)] {
		("Int", "Int") -> {
			if x < y 1
			else if x == y 0
			else -1
		}
		("List", "List") -> {
			for (x, y) in zip(x, y) {
				match cmp(x, y) {
					0 -> continue,
					res -> return res,
				}
			} 
			if len(x) < len(y) 1
			else if len(x) == len(y) 0
			else -1
		}
		("List", "Int") -> cmp(x, [y]),
		("Int", "List") -> cmp([x], y),
	}
}

pairs := read("aoc-2022/inputs/13.txt")
	>> split("\n\n")
	>> map(\>> split("\n") >> map(eval));
	
res := 0;
for (ind, (x, y)) in enumerate(pairs) if cmp(x, y) == 1 res += 1 + ind;
res >> print;

flattened := [[[2]], [[6]]];
for (x, y) in pairs {
	push(x, flattened);
	push(y, flattened);
}

sorted := flattened >> sort(cmp); //>> map(print);
first := Nil;
for (i, packet) in sorted >> rev >> enumerate {
	if packet == [[2]] first = i + 1;
	if packet == [[6]] return (i+1) * first;
}
