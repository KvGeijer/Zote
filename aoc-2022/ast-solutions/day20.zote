read("aoc-2022/inputs/20.txt")
	>> split('\n')
	>> map(int)
	>> map(\x -> [x, Nil, Nil])
	:>> arena;

// Print and you die
for (i, pair) in arena >> enumerate {
	pair[1] = arena[(i-1) % len(arena)];
	pair[2] = arena[(i+1) % len(arena)];	
}

// Can't just do a simple clone for part 2 as we want the recursive links...
backup := arena >> map(\>> map(id));
for (i, pair) in backup >> enumerate {
	pair[1] = backup[(i-1) % len(backup)];
	pair[2] = backup[(i+1) % len(backup)];
}

fn mix(arena) -> {
	for entry in arena {
		(id, prev, next) := entry;

		steps := id % (len(arena) - 1);
		prev[2] = next;
		next[1] = prev;

		new_next := next;
		for _ in [0:steps] {
			new_next = new_next[2];			
		}
		
		entry[1] = new_next[1];
		entry[2] = new_next;
		new_next[1] = entry;	
		entry[1][2] = entry;
	}
}

fn print_res(arena) -> {
	entry := Nil;
	for e in arena if e[0] == 0 entry = e;

	[0:3] >> map(\_ -> [0:1000] >> map(\_ -> entry = entry[2]) >> \_ -> entry[0]) 
		>> sum 
		>> print; 
}

mix(arena);
print_res(arena);

dec_key := 811589153;
for entry in backup {
	entry[0] *= dec_key;
}

for _ in [0:10] mix(backup);
print_res(backup);

