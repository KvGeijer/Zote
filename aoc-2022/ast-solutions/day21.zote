instructions := read("aoc-2022/inputs/21.txt")
	>> split("\n")
	>> map(\>> split(": "))
	>> map(\(name, rest) -> [name, rest >> split(" ")])
	>> dict;

monkeys := dict();

// TODO: Again, memoize decorator!
fn find_value(name) -> {
	if in(name, monkeys) return monkeys[name];
	
	monkeys[name] = match instructions[name] {
		(l, op, r) -> {
			// TODO: Include types in pattern matching!
			(left, right) := [l, r] >> map(find_value);

			if typeof(left) == typeof(right) match op {
				"+" -> left + right,
				"-" -> left - right,
				"*" -> left * right,
				"/" -> left / right,
			} else {
				[left, op, right]
			}
		}
		"X" -> "X",
		nbr -> int(nbr[0]),
	}
}

"root" >> find_value >> print;

monkeys = dict();
monkeys["humn"] = "X";

fn balance(expression, answer) -> 
	if expression == "X" 
		answer
	else if typeof(expression[0]) == "Int" match expression[1] { // nbr op y = answer
		"+" -> balance(expression[2], answer - expression[0]),
		"-" -> balance(expression[2], expression[0] - answer),
		"*" -> balance(expression[2], answer / expression[0]),
		"/" -> balance(expression[2], expression[0] / answer),
	} else match expression[1] { 								 // y op nbr = answer
		"+" -> balance(expression[0], answer - expression[2]),
		"-" -> balance(expression[0], expression[2] + answer),
		"*" -> balance(expression[0], answer / expression[2]),
		"/" -> balance(expression[0], expression[2] * answer),
	};

expression := find_value("root");
if typeof(expression[0]) == "Int" {
	balance(expression[2], float(expression[0]))
} else {
	balance(expression[0], float(expression[2]))
} >> print;
