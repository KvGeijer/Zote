fn simple_overlap(left, right) -> {
	var ldict = dict();
	for char in left {
		ldict[char] = Nil;
	};

	for char in right {
		if in(char, ldict) {
			return char;	
		};
	};
};

fn priority(char) -> {
	var ascii = to_ascii(char);
	if ascii >= to_ascii("a") {
		ascii - to_ascii("a") + 1
	} else {
		ascii - to_ascii("A") + 27
	}
};

var lines = read("aoc-2022/inputs/03.txt")
	>> split("\n") 
	>> map(list);

// Part 1
lines
	>> map(sack -> {
		var left = sack[:len(sack)/2];
		var right = sack[len(sack)/2:];
		simple_overlap(left, right)
	})
	>> map(priority)
	>> sum
	>> print;

// Part 2
fn group_overlap(e1, e2, e3) -> {
	var d1 = dict();
	for char in e1 {
		d1[char] = Nil;
	};

	var d2 = dict();
	for char in e2 {
		d2[char] = Nil;
	};

	for char in e3 {
		if in(char, d1) and in(char, d2) {
			return char;	
		};
	};
};

var part2 = 0;
for group in [0:len(lines)/3] {
	var elves = lines[group*3:(group+1)*3];
	part2 = part2 + (group_overlap(elves[0], elves[1], elves[2]) >> priority);
};
print(part2);
