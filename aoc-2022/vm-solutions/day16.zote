include!("stdlib");

read("../inputs/16.txt")
	>> split("\n")
	>> map(\line -> {
		words := line >> split(" ");
		[words[1], int(words[4][5:-1]), words[9:] >> map(\word -> word[:2])]
	})
	:>> lines;

valve_to_int := dict();
for (i, (valve, _, _)) in enumerate(lines) {
	valve_to_int[valve] = i;
}

ind_to_flow := lines >> map(\(_, f, _) -> f);

nonzero_valves := lines 
	>> filter(\(_, f, _) -> f != 0) 
	>> map(\(v, _, _) -> valve_to_int[v]);

// We do need list comprehensions! Maybe just integrate with loops?
dists := [0:len(lines)] >> map(\>> const([0:len(lines)] >> map(\>> const(99)))); // set all dists to inf
for (i, (_, _, neighs)) in enumerate(lines) for neigh in neighs {
	dists[i][valve_to_int[neigh]] = 1;	// Actually connected ones to 1
}

// Floyd Warshall to find shortest path between all valves
for k in [0:len(lines)] for i in [0:len(lines)] for j in [0:len(lines)]
	dists[i][j] = min(dists[i][j], dists[i][k] + dists[k][j]);

cache := dict();
fn dfs(at, closed, time) -> {
	// Can we make this some sort of decorator?
	key := [at, closed, time];
	if key >> in(cache) return cache[key];

	// Actual alg
	best := 0;
	for choice in closed {
		time_left := time - 1 - dists[at][choice];
		res := if time_left >= 0 {
			dfs(choice, closed >> filter(\v -> v != choice), time_left) + ind_to_flow[choice]*time_left
		} else {
			0
		};
		best = max(best, res);
	}

	cache[key] = best
}

dfs(valve_to_int["AA"], nonzero_valves, 30) >> print;

find_subseqs := \poss -> {
	if poss {
		res := [];
		for rec in find_subseqs(poss[1:]) {
			rec >> push(res);
			([poss[0]] ++ rec) >> push(res);
		}
		res
	} else {
		[[]]
	}
};

best := 0;
for (i, human_ok_valves) in nonzero_valves >> find_subseqs >> enumerate {
	res := dfs(valve_to_int["AA"], human_ok_valves, 26) +
		   dfs(valve_to_int["AA"], nonzero_valves >> filter(\v -> !in(v, human_ok_valves)), 26); 
	
	best = max(best, res);
}
print(best);
