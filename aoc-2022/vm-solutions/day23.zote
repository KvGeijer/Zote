include!("stdlib");

fn flatten(xs) -> {
	res := [];
	for l in xs for x in l x >> push(res);
	res
}

fn ground_covered(karta) -> {
	minr := karta >> keys >> map(head) >> minimum;
	maxr := karta >> keys >> map(head) >> maximum;
	minc := karta >> keys >> map(\x -> x[1]) >> minimum;
	maxc := karta >> keys >> map(\x -> x[1]) >> maximum;
	empty := 0;
	for r in [minr:maxr+1] for c in [minc:maxc+1] {
		if !in([r, c], karta) empty += 1;
	}
	empty
}

read("../inputs/23.txt")
	>> split("\n")
	>> map(\>> enumerate >> filter(\(_, c) -> c == "#") >> map(head))
	>> enumerate
	>> map(\(row, cols) -> cols >> map(\col -> [row, col]))
	>> flatten
	>> set
	:>> karta;

move_plans := [
	[[-1, -1], [-1, 0], [-1, 1]],
	[[1, -1], [1, 0], [1, 1]],
	[[-1, -1], [0, -1], [1, -1]],
	[[-1, 1], [0, 1], [1, 1]],
];
dirs := move_plans >> flatten >> set >> keys;

// TODO: Good standard lib functions
vadd := \x, y -> zip(x, y) >> map(\(x, y) -> x + y);
any := \>> map(bool) >> sum >> bool;
not := \x -> !x;

round := 1;
while true {
	// from, to
	moves := [];
	next_counts := dict();

	for pos in keys(karta) {
		alive := dirs >> map(\>> vadd(pos) >> in(karta)) >> any;   

		next := pos;
		if alive for try_moves in move_plans {
			if try_moves >> map(\>> vadd(pos) >> in(karta)) >> any >> not {
				next = try_moves[1] >> vadd(pos);
				break;
			}
		} 

		// TODO defaultdict, or some nice get/update functions should be in stdlib
		next_counts[next] = if !in(next, next_counts) { 1 } else { next_counts[next] + 1 };
		[pos, next] >> push(moves);
	}

	karta = set();
	moved := false;
	for (from, to) in moves {
		if from != to and next_counts[to] == 1 {
			to >> insert(karta);
			moved = true;
		} else {
			from >> insert(karta);
		}
	}
	
	if round == 10 karta >> ground_covered >> print
	else if !moved { print(round); return; };

	move_plans = move_plans[1:] ++ [move_plans[0]];
	round += 1;
}
