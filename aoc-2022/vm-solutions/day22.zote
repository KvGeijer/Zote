include!("stdlib");

// Hard coded constants, as we already have hard coded things for this map.
rwidth := 50;
rheight := 50;
// rwidth := len(karta[0]) / 3;
// rheight := len(karta) / 4;

fn get_region((y, x), karta) -> {
	col := (x - 1) / rwidth;
	row := (y - 1) / rheight;

    col + row*3 + 1
}

// Julia std functions to zote
fn vadd(x, y) -> zip(x, y) >> map(\(x, y) -> x + y);
fn findfirst(func, iter) -> for (i, v) in enumerate(iter) if func(v) return i + 1;
fn isdigit(x) -> to_ascii(x) < to_ascii('A');

// The wrapping logic here (and some more) is taken from my Julia solution, as I really did not want to do this shit again. Therefore it is quite ugly, and uses 1-indexing.
fn do_move(pos, dir, dist, karta, simple) -> {
    for _ in [0:dist] {
        next_pos := pos >> vadd(dir);
        next_dir := clone(dir);
        // print(next_pos);

// Still keep the same direction meaning for 2d, but just do extra when wrapping over edges
// Part 2 map
//
//    2 3
//    5
//  7 8
//  10
//
        // Just make sure we are on a valid tile!
        // println(next_pos)
        region := get_region(pos, karta);
        rep := false;
        while   next_pos[0] < 1 or 
                next_pos[0] > len(karta) or 
                next_pos[1] < 1 or 
                next_pos[1] > len(karta[next_pos[0]-1]) or //TODO: Use of next_pos, off by one?
                karta[next_pos[0]-1][next_pos[1]-1] == ' ' {
            // println("$next_pos, $dir")

            if rep and !simple {
                // print("REPEATING: $region, $next_pos, $dir, $pos");
				print("REPEATING!!!");
                // error(1);
			}
			else if simple match dir {
				// Wrap around the map!
				(1, 0) -> next_pos[0] = (next_pos[0] % len(karta)) + 1,
				(0, 1) -> next_pos[1] = (next_pos[1] % len(karta[0])) + 1,
				(-1, 0) -> next_pos[0] = if next_pos[0] == 0 { len(karta) } else { next_pos[0] - 1 },
				(0, -1) -> next_pos[1] = if next_pos[1] == 0 { len(karta[0]) } else { next_pos[1] - 1 },
			}

            // Just do wrapping manually!
            else if region == 2 and next_pos[0] < 1 {
                // Reappear from the left side of 10
                next_dir[0] = 0;
                next_dir[1] = 1;
                next_pos[0] = next_pos[1] - rwidth + 3*rheight;
                next_pos[1] = 1;
			}
            else if region == 2 and next_pos[1] <= rwidth {
                // Reappear at left side of 7, but upside down
                next_dir[0] = 0;
                next_dir[1] = 1;
                next_pos[0] = 3*rheight - next_pos[0] + 1;
                next_pos[1] = 1;
			}
            else if region == 3 and next_pos[0] < 1 {
                // Reappear at bottom of 10
                next_dir[0] = -1;
                next_dir[1] = 0;
                next_pos[0] = 4*rheight;
                next_pos[1] -= 2*rwidth;
			}
            else if region == 3 and next_pos[1] > len(karta[0]) {
                // Reappear at right side of 8
                next_dir[0] = 0;
                next_dir[1] = -1;
                next_pos[0] = 3*rheight + 1 - next_pos[0];
                next_pos[1] = 2*rwidth;
			}
            else if region == 3 and next_pos[0] > rheight {
                // Get to right of 5
                next_dir[0] = 0;
                next_dir[1] = -1;
                next_pos[0] = rheight + (next_pos[1] - 2*rwidth);
                next_pos[1] = 2*rwidth;
			}
            else if region == 5 and next_pos[1] > 2*rwidth {
                // To bottom of 3
                next_dir[0] = -1;
                next_dir[1] = 0;
                next_pos[1] = (next_pos[0] - rheight) + 2*rwidth;
                next_pos[0] = rheight;
			}
            else if region == 5 and next_pos[1] <= rwidth {
                // top of 7
                next_dir[0] = 1;
                next_dir[1] = 0;
                next_pos[1] = next_pos[0] - rheight;
                next_pos[0] = 1 + 2*rheight;
			}
            else if region == 8 and next_pos[1] > 2*rwidth {
                // Right of 3
                next_dir[0] = 0;
                next_dir[1] = -1;
                next_pos[0] = rheight + 1 - (next_pos[0] - 2*rheight);
                next_pos[1] = 3*rwidth;
			}
            else if region == 8 and next_pos[0] > 3*rheight {
                // To right of 10
                next_dir[0] = 0;
                next_dir[1] = -1;
                next_pos[0] = next_pos[1] - rwidth + 3*rheight;
                next_pos[1] = rwidth;
			}
            else if region == 7 and next_pos[0] <= 2*rheight {
                // Left of 5
                next_dir[0] = 0;
                next_dir[1] = 1;
                next_pos[0] = rheight + next_pos[1];
                next_pos[1] = rwidth + 1;
			}
            else if region == 7 and next_pos[1] < 1 {
                // Left of 2
                next_dir[0] = 0;
                next_dir[1] = 1;
                next_pos[0] = rheight + 1 - (next_pos[0] - 2*rheight);
                next_pos[1] = rwidth + 1;
			}
            else if region == 10 and next_pos[1] < 1 {
                // Top of 2
                next_dir[0] = 1;
                next_dir[1] = 0;
                next_pos[1] = next_pos[0] - 3*rheight + rwidth;
                next_pos[0] = 1;
			}
            else if region == 10 and next_pos[0] > len(karta) {
                // Top of 3
                next_dir[0] = 1;
                next_dir[1] = 0;
                next_pos[0] = 1;
                next_pos[1] = next_pos[1] + 2*rwidth;
			}
            else if region == 10 and next_pos[1] > rwidth {
                // Bottom of 8
                next_dir[0] = -1;
                next_dir[1] = 0;
                next_pos[1] = (next_pos[0] - 3*rheight) + rwidth;
                next_pos[0] = 3*rheight;
			}
            else {
				print("I'M LOST!");
                // error(1);
            }

            rep = true;
                           
        }

        if karta[next_pos[0]-1][next_pos[1]-1] == '#' {
            return;
		}
        else {
	        dir[0] = next_dir[0];
	        dir[1] = next_dir[1];
	        pos[0] = next_pos[0];
	        pos[1] = next_pos[1];
		}
    }
}

(karta, movestring) := read("../inputs/22.txt")
	>> split("\n\n")
	>> map(\>> split('\n'));
// karta = karta >> map(list);
karta_simple := karta >> deepclone;

moves := [];
acc := 0;
for char in movestring[0] {
	if isdigit(char) {
		acc = acc*10 + int(char)
	}
	else {
		acc >> push(moves);
		acc = 0;
		char >> push(moves);
	}
}
if acc != 0 push(acc, moves);

for (simple, karta) in [[true, karta_simple], [false, karta]] {
	pos := [1, findfirst(\x -> x != ' ', karta[0])];
	dir := [0, 1];

	for move in moves {
		match move {
			'R' -> match dir {
	            (0, 1) -> dir = [1, 0], // Facing right
	            (1, 0) -> dir = [0, -1],
	            (0, -1) -> dir = [-1, 0],
	            (-1, 0) -> dir = [0, 1],
			},
	        'L' -> match dir {
	            (0, 1) -> dir = [-1, 0],
	            (-1, 0) -> dir = [0, -1],
	            (0, -1) -> dir = [1, 0],
	            (1, 0) -> dir = [0, 1],
	        },
			int -> {
				do_move(pos, dir, int, karta, simple);
			}
		}
	}

	facing := match dir {
		(0, 1) -> 0,
		(1, 0) -> 1,
		(0, -1) -> 2,
		(-1, 0) -> 3,
	};

	1000*pos[0] + 4*pos[1] + facing >> print;
}
