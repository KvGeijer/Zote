read("aoc-2022/inputs/18.txt") 
	>> split("\n")
	>> map(\>> split(",") >> map(int))
	>> set
	:>> rock;

exposed := 0;
for ind in keys(rock) {
	for d in [1, -1] for i in [0:3] {
		neigh := ind >> map(id);
		neigh[i] += d;
		if !in(neigh, rock) exposed += 1;
	}
}
print(exposed);

maxs := [Nil, Nil, Nil];
mins := [Nil, Nil, Nil];
for i in [0:3] {
	maxs[i] = rock >> keys
		>> map(\p -> p[i])
		>> max;
	mins[i] = rock >> keys
		>> map(\p -> p[i])
		>> min;
}

outside := set();
exposed_out := 0;
fn dfs(at, deep) -> {
	if in(at, outside) return;
	for i in [0:3] {
		// to keep it boundede
		if at[i] > maxs[i] + 1 or at[i] < mins[i] - 1 return;
	}
	print(deep);
	at >> insert(outside);

	for d in [1, -1] for i in [0:3] {
		neigh := at >> map(id);
		neigh[i] += d;
		if in(neigh, rock) exposed_out += 1
		else dfs(neigh, deep+1);
	}
}

dfs(maxs, 0);
print(exposed_out);
