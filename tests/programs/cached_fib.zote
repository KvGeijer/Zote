fn cached_fib(n) -> {
	if n < 0 
		return [];
	
 	if n == 0 
		[1]
	else if n == 1
		[1, 1]
	else {
		cache := [1, 1];
		x := 2;
		i := -1;
		while (i += 1) < n	
			 cache = cache ++ [cache[-1] + cache[-2]];

		cache
	}
}

// Added some extra array slicing and manipulation for tests
fibs := cached_fib(20);
fibs[-4:-1] = [0,0,0];
fibs ++ fibs[1:7:3] >> print;
